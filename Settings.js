import React, { useState } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, TextInput, Alert } from 'react-native';
import { Picker } from '@react-native-picker/picker';

export function SettingsScreen({ name, setName, sex, setSex, height, setHeight, weight, setWeight, goal, setGoal, setCalories, setProteins, setCarbs }) {
  const [localName, setLocalName] = useState(name);
  const [localSex, setLocalSex] = useState(sex || '');  // –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ ‚Äî –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  const [localHeight, setLocalHeight] = useState(height);
  const [localWeight, setLocalWeight] = useState(weight);
  const [localGoal, setLocalGoal] = useState(goal || '');  // –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ ‚Äî –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è

  const [isNameFocused, setIsNameFocused] = useState(false);
  const [isWeightFocused, setIsWeightFocused] = useState(false);
  const [isHeightFocused, setIsHeightFocused] = useState(false);

  const handleSexChange = (value) => {
    setLocalSex(value);
  };

  const handleSave = () => {
    if (!localSex) {
      Alert.alert('–ü–æ–º–∏–ª–∫–∞', '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å');
      return;
    }
    if (!localGoal) {
      Alert.alert('–ü–æ–º–∏–ª–∫–∞', '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å');
      return;
    }
    setName(localName);
    setSex(localSex);
    setHeight(localHeight);
    setWeight(localWeight);
    setGoal(localGoal);

    const w = parseFloat(localWeight);
    const h = parseFloat(localHeight);

    if (localGoal === '–°—Ö—É–¥–Ω–µ–Ω–Ω—è') {
      setCalories(w * 25);
      setProteins(w * 0.8);
      setCarbs(h * 1.5);
    } else if (localGoal === '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–∞–≥–∏') {
      setCalories(w * 30);
      setProteins(w * 1.2);
      setCarbs(h * 2);
    } else if (localGoal === "–ù–∞–±—ñ—Ä –º'—è–∑–æ–≤–æ—ó –º–∞—Å–∏") {
      setCalories(w * 35);
      setProteins(w * 2);
      setCarbs(h * 2);
    } else {
      setCalories(0);
      setProteins(0);
      setCarbs(0);
    }
  };

  return (
    <View style={stylesSettings.container}>
      <Text style={stylesSettings.title}>üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</Text>

      <View style={stylesSettings.setBlock}>
        <Text style={stylesSettings.label}>üìù –í–∞—à–µ —ñ–º'—è:</Text>
        <TextInput
          style={stylesSettings.input}
          placeholder={!isNameFocused ? "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è" : ""}
          value={localName}
          onChangeText={setLocalName}
          onFocus={() => {
            if (localName === name) setLocalName('');
            setIsNameFocused(true);
          }}
          onBlur={() => setIsNameFocused(false)}
        />
      </View>

      <View style={stylesSettings.setBlock}>
        <Text style={stylesSettings.label}>‚ößÔ∏è –í–∞—à–∞ —Å—Ç–∞—Ç—å:</Text>
        <Picker
          style={stylesSettings.picker}
          selectedValue={localSex}
          onValueChange={handleSexChange}
          mode="dropdown"
        >
          <Picker.Item label="–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å" value="" />
          <Picker.Item label="–ß–æ–ª–æ–≤—ñ—á–∞" value="–ß–æ–ª–æ–≤—ñ—á–∞" />
          <Picker.Item label="–ñ—ñ–Ω–æ—á–∞" value="–ñ—ñ–Ω–æ—á–∞" />
        </Picker>

        <Text style={stylesSettings.label}>‚öñÔ∏è –í–∞—à–∞ –≤–∞–≥–∞ (–∫–≥):</Text>
        <TextInput
          style={stylesSettings.input}
          placeholder={!isWeightFocused ? "–ù–∞–ø—Ä–∏–∫–ª–∞–¥, 70" : ""}
          keyboardType="numeric"
          value={localWeight}
          onChangeText={setLocalWeight}
          onFocus={() => {
            if (localWeight === weight) setLocalWeight('');
            setIsWeightFocused(true);
          }}
          onBlur={() => setIsWeightFocused(false)}
        />

        <Text style={stylesSettings.label}>üìè –í–∞—à —Ä—ñ—Å—Ç (—Å–º):</Text>
        <TextInput
          style={stylesSettings.input}
          placeholder={!isHeightFocused ? "–ù–∞–ø—Ä–∏–∫–ª–∞–¥, 175" : ""}
          keyboardType="numeric"
          value={localHeight}
          onChangeText={setLocalHeight}
          onFocus={() => {
            if (localHeight === height) setLocalHeight('');
            setIsHeightFocused(true);
          }}
          onBlur={() => setIsHeightFocused(false)}
        />
      </View>

      <View style={stylesSettings.setBlock}>
        <Text style={stylesSettings.label}>üéØ –í–∞—à–∞ —Ü—ñ–ª—å:</Text>
        <Picker
          style={stylesSettings.picker}
          selectedValue={localGoal}
          onValueChange={setLocalGoal}
          mode="dropdown"
        >
          <Picker.Item label="–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å" value="" />
          <Picker.Item label="–°—Ö—É–¥–Ω–µ–Ω–Ω—è" value="–°—Ö—É–¥–Ω–µ–Ω–Ω—è" />
          <Picker.Item label="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–∞–≥–∏" value="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–∞–≥–∏" />
          <Picker.Item label="–ù–∞–±—ñ—Ä –º'—è–∑–æ–≤–æ—ó –º–∞—Å–∏" value="–ù–∞–±—ñ—Ä –º'—è–∑–æ–≤–æ—ó –º–∞—Å–∏" />
        </Picker>
      </View>

      <TouchableOpacity style={stylesSettings.addButton} onPress={handleSave}>
        <Text style={stylesSettings.addButtonText}>–ó–±–µ—Ä–µ–≥—Ç–∏</Text>
      </TouchableOpacity>
    </View>
  );
}

const stylesSettings = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f7f9fc', // —Å–≤—ñ—Ç–ª–æ-–±–ª–∞–∫–∏—Ç–Ω–∏–π, –ª–µ–≥–∫–∏–π —Ñ–æ–Ω
    paddingHorizontal: 24,
    paddingTop: 32,
    paddingBottom: 20,
  },
  setBlock: {
    backgroundColor: '#fff',
    borderRadius: 14,
    paddingVertical: 20,
    paddingHorizontal: 20,
    marginBottom: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 6 },
    shadowOpacity: 0.1,
    shadowRadius: 12,
    elevation: 6, // —Ç—ñ–Ω—å –¥–ª—è Android
  },
  label: {
    fontSize: 15,
    fontWeight: '600',
    color: '#444',
    marginBottom: 8,
  },
  input: {
    height: 44,
    borderWidth: 1,
    borderColor: '#d1d9e6',
    borderRadius: 12,
    paddingHorizontal: 16,
    backgroundColor: '#fafafa',
    fontSize: 16,
    color: '#222',
    marginBottom: 14,
  },
  picker: {
    height: 44,
    backgroundColor: '#fafafa',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#d1d9e6',
    marginBottom: 14,
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    textAlign: 'center',
    color: '#222',
    marginBottom: 32,
    letterSpacing: 0.5,
  },
  information: {
    position: 'absolute',
    bottom: 20,
    left: 24,
    right: 24,
    alignItems: 'center',
  },
  infoText: {
    fontSize: 13,
    color: '#666',
    textAlign: 'center',
    lineHeight: 18,
    fontStyle: 'italic',
  },
  addButton: {
    backgroundColor: '#4caf50', 
    paddingVertical: 14,
    borderRadius: 14,
    marginTop: 10,
    shadowColor: '#4caf50',
    shadowOffset: { width: 0, height: 8 },
    shadowOpacity: 0.3,
    shadowRadius: 12,
    elevation: 7,
  },
  addButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '700',
    textAlign: 'center',
    letterSpacing: 0.8,
  },
});